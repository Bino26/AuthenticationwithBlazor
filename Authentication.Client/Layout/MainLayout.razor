@using Authentication.Client.Layout
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Class="pa-4 d-flex justify-space-evenly" Elevation="0">
        <AuthorizeView>
            <NotAuthorized>
                <MudNavLink Href="register" Match="NavLinkMatch.Prefix">Register</MudNavLink>
                <MudSpacer />
                <MudNavLink Href="login" Match="NavLinkMatch.Prefix">Login</MudNavLink>
            </NotAuthorized>
            <Authorized>
                <MudText>@context.User.Identity!.Name</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Title="Logout" @onclick="Logout">LogOut</MudIconButton>
            </Authorized>
        </AuthorizeView>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> 
    </MudAppBar>
    <AuthorizeView>
        
    </AuthorizeView>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null!);
        navigationManager.NavigateTo("/", replace: true);
    }
}